package com.constaapps.constacalc.ui.main;
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Mon May 27 13:15:58 EDT 2019
//----------------------------------------------------

/** CUP v0.10k generated parser.
  * @version Mon May 27 13:15:58 EDT 2019
  */
public class CalcParser extends lr_parser {

  /** Default constructor. */
  public CalcParser() {super();}

  /** Constructor which sets the default scanner. */
  public CalcParser(Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\036\000\002\003\005\000\002\002\004\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\006\000\002\003\006\000\002\003\006\000" +
    "\002\003\005\000\002\003\005\000\002\003\006\000\002" +
    "\003\006\000\002\003\006\000\002\003\006\000\002\003" +
    "\006\000\002\003\006\000\002\003\006\000\002\003\006" +
    "\000\002\003\006\000\002\003\006\000\002\003\006\000" +
    "\002\003\006\000\002\003\006\000\002\003\006\000\002" +
    "\003\004\000\002\003\005\000\002\003\003\000\002\003" +
    "\003\000\002\003\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\134\000\054\010\015\012\010\013\005\014\027\015" +
    "\011\016\016\017\013\022\024\023\004\024\025\025\026" +
    "\026\031\031\023\032\030\033\012\034\014\035\017\036" +
    "\021\037\007\040\022\041\020\001\002\000\026\002\uffe5" +
    "\004\uffe5\005\uffe5\006\uffe5\007\uffe5\011\uffe5\020\uffe5\021" +
    "\uffe5\027\uffe5\030\uffe5\001\002\000\004\010\134\001\002" +
    "\000\024\002\133\004\037\005\034\006\042\007\035\020" +
    "\044\021\043\027\036\030\040\001\002\000\004\010\130" +
    "\001\002\000\004\010\125\001\002\000\004\010\122\001" +
    "\002\000\004\010\117\001\002\000\004\010\114\001\002" +
    "\000\004\010\111\001\002\000\054\010\015\012\010\013" +
    "\005\014\027\015\011\016\016\017\013\022\024\023\004" +
    "\024\025\025\026\026\031\031\023\032\030\033\012\034" +
    "\014\035\017\036\021\037\007\040\022\041\020\001\002" +
    "\000\004\010\104\001\002\000\004\010\101\001\002\000" +
    "\026\002\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4\011\uffe4" +
    "\020\uffe4\021\uffe4\027\uffe4\030\uffe4\001\002\000\004\010" +
    "\076\001\002\000\004\010\073\001\002\000\004\010\070" +
    "\001\002\000\026\002\uffe6\004\uffe6\005\uffe6\006\uffe6\007" +
    "\uffe6\011\uffe6\020\uffe6\021\uffe6\027\uffe6\030\uffe6\001\002" +
    "\000\004\010\065\001\002\000\004\010\062\001\002\000" +
    "\004\010\057\001\002\000\004\010\054\001\002\000\004" +
    "\010\032\001\002\000\054\010\015\012\010\013\005\014" +
    "\027\015\011\016\016\017\013\022\024\023\004\024\025" +
    "\025\026\026\031\031\023\032\030\033\012\034\014\035" +
    "\017\036\021\037\007\040\022\041\020\001\002\000\024" +
    "\004\037\005\034\006\042\007\035\011\041\020\044\021" +
    "\043\027\036\030\040\001\002\000\054\010\015\012\010" +
    "\013\005\014\027\015\011\016\016\017\013\022\024\023" +
    "\004\024\025\025\026\026\031\031\023\032\030\033\012" +
    "\034\014\035\017\036\021\037\007\040\022\041\020\001" +
    "\002\000\054\010\015\012\010\013\005\014\027\015\011" +
    "\016\016\017\013\022\024\023\004\024\025\025\026\026" +
    "\031\031\023\032\030\033\012\034\014\035\017\036\021" +
    "\037\007\040\022\041\020\001\002\000\026\002\uffe8\004" +
    "\uffe8\005\uffe8\006\uffe8\007\uffe8\011\uffe8\020\uffe8\021\uffe8" +
    "\027\uffe8\030\uffe8\001\002\000\054\010\015\012\010\013" +
    "\005\014\027\015\011\016\016\017\013\022\024\023\004" +
    "\024\025\025\026\026\031\031\023\032\030\033\012\034" +
    "\014\035\017\036\021\037\007\040\022\041\020\001\002" +
    "\000\054\010\015\012\010\013\005\014\027\015\011\016" +
    "\016\017\013\022\024\023\004\024\025\025\026\026\031" +
    "\031\023\032\030\033\012\034\014\035\017\036\021\037" +
    "\007\040\022\041\020\001\002\000\026\002\ufff1\004\ufff1" +
    "\005\ufff1\006\ufff1\007\ufff1\011\ufff1\020\ufff1\021\ufff1\027" +
    "\ufff1\030\ufff1\001\002\000\054\010\015\012\010\013\005" +
    "\014\027\015\011\016\016\017\013\022\024\023\004\024" +
    "\025\025\026\026\031\031\023\032\030\033\012\034\014" +
    "\035\017\036\021\037\007\040\022\041\020\001\002\000" +
    "\054\010\015\012\010\013\005\014\027\015\011\016\016" +
    "\017\013\022\024\023\004\024\025\025\026\026\031\031" +
    "\023\032\030\033\012\034\014\035\017\036\021\037\007" +
    "\040\022\041\020\001\002\000\054\010\015\012\010\013" +
    "\005\014\027\015\011\016\016\017\013\022\024\023\004" +
    "\024\025\025\026\026\031\031\023\032\030\033\012\034" +
    "\014\035\017\036\021\037\007\040\022\041\020\001\002" +
    "\000\026\002\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8\011" +
    "\ufff8\020\ufff8\021\ufff8\027\036\030\ufff8\001\002\000\026" +
    "\002\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7\011\ufff7\020" +
    "\ufff7\021\ufff7\027\036\030\ufff7\001\002\000\026\002\ufffe" +
    "\004\ufffe\005\ufffe\006\ufffe\007\ufffe\011\ufffe\020\044\021" +
    "\043\027\036\030\040\001\002\000\026\002\uffe7\004\uffe7" +
    "\005\uffe7\006\uffe7\007\uffe7\011\uffe7\020\uffe7\021\uffe7\027" +
    "\036\030\uffe7\001\002\000\026\002\001\004\001\005\001" +
    "\006\042\007\035\011\001\020\044\021\043\027\036\030" +
    "\040\001\002\000\026\002\ufffd\004\ufffd\005\ufffd\006\ufffd" +
    "\007\ufffd\011\ufffd\020\044\021\043\027\036\030\040\001" +
    "\002\000\026\002\uffff\004\uffff\005\uffff\006\042\007\035" +
    "\011\uffff\020\044\021\043\027\036\030\040\001\002\000" +
    "\054\010\015\012\010\013\005\014\027\015\011\016\016" +
    "\017\013\022\024\023\004\024\025\025\026\026\031\031" +
    "\023\032\030\033\012\034\014\035\017\036\021\037\007" +
    "\040\022\041\020\001\002\000\024\004\037\005\034\006" +
    "\042\007\035\011\056\020\044\021\043\027\036\030\040" +
    "\001\002\000\026\002\uffe9\004\uffe9\005\uffe9\006\uffe9\007" +
    "\uffe9\011\uffe9\020\uffe9\021\uffe9\027\uffe9\030\uffe9\001\002" +
    "\000\054\010\015\012\010\013\005\014\027\015\011\016" +
    "\016\017\013\022\024\023\004\024\025\025\026\026\031" +
    "\031\023\032\030\033\012\034\014\035\017\036\021\037" +
    "\007\040\022\041\020\001\002\000\024\004\037\005\034" +
    "\006\042\007\035\011\061\020\044\021\043\027\036\030" +
    "\040\001\002\000\026\002\ufff4\004\ufff4\005\ufff4\006\ufff4" +
    "\007\ufff4\011\ufff4\020\ufff4\021\ufff4\027\ufff4\030\ufff4\001" +
    "\002\000\054\010\015\012\010\013\005\014\027\015\011" +
    "\016\016\017\013\022\024\023\004\024\025\025\026\026" +
    "\031\031\023\032\030\033\012\034\014\035\017\036\021" +
    "\037\007\040\022\041\020\001\002\000\024\004\037\005" +
    "\034\006\042\007\035\011\064\020\044\021\043\027\036" +
    "\030\040\001\002\000\026\002\ufff2\004\ufff2\005\ufff2\006" +
    "\ufff2\007\ufff2\011\ufff2\020\ufff2\021\ufff2\027\ufff2\030\ufff2" +
    "\001\002\000\054\010\015\012\010\013\005\014\027\015" +
    "\011\016\016\017\013\022\024\023\004\024\025\025\026" +
    "\026\031\031\023\032\030\033\012\034\014\035\017\036" +
    "\021\037\007\040\022\041\020\001\002\000\024\004\037" +
    "\005\034\006\042\007\035\011\067\020\044\021\043\027" +
    "\036\030\040\001\002\000\026\002\ufff3\004\ufff3\005\ufff3" +
    "\006\ufff3\007\ufff3\011\ufff3\020\ufff3\021\ufff3\027\ufff3\030" +
    "\ufff3\001\002\000\054\010\015\012\010\013\005\014\027" +
    "\015\011\016\016\017\013\022\024\023\004\024\025\025" +
    "\026\026\031\031\023\032\030\033\012\034\014\035\017" +
    "\036\021\037\007\040\022\041\020\001\002\000\024\004" +
    "\037\005\034\006\042\007\035\011\072\020\044\021\043" +
    "\027\036\030\040\001\002\000\026\002\uffea\004\uffea\005" +
    "\uffea\006\uffea\007\uffea\011\uffea\020\uffea\021\uffea\027\uffea" +
    "\030\uffea\001\002\000\054\010\015\012\010\013\005\014" +
    "\027\015\011\016\016\017\013\022\024\023\004\024\025" +
    "\025\026\026\031\031\023\032\030\033\012\034\014\035" +
    "\017\036\021\037\007\040\022\041\020\001\002\000\024" +
    "\004\037\005\034\006\042\007\035\011\075\020\044\021" +
    "\043\027\036\030\040\001\002\000\026\002\uffeb\004\uffeb" +
    "\005\uffeb\006\uffeb\007\uffeb\011\uffeb\020\uffeb\021\uffeb\027" +
    "\uffeb\030\uffeb\001\002\000\054\010\015\012\010\013\005" +
    "\014\027\015\011\016\016\017\013\022\024\023\004\024" +
    "\025\025\026\026\031\031\023\032\030\033\012\034\014" +
    "\035\017\036\021\037\007\040\022\041\020\001\002\000" +
    "\024\004\037\005\034\006\042\007\035\011\100\020\044" +
    "\021\043\027\036\030\040\001\002\000\026\002\uffed\004" +
    "\uffed\005\uffed\006\uffed\007\uffed\011\uffed\020\uffed\021\uffed" +
    "\027\uffed\030\uffed\001\002\000\054\010\015\012\010\013" +
    "\005\014\027\015\011\016\016\017\013\022\024\023\004" +
    "\024\025\025\026\026\031\031\023\032\030\033\012\034" +
    "\014\035\017\036\021\037\007\040\022\041\020\001\002" +
    "\000\024\004\037\005\034\006\042\007\035\011\103\020" +
    "\044\021\043\027\036\030\040\001\002\000\026\002\uffee" +
    "\004\uffee\005\uffee\006\uffee\007\uffee\011\uffee\020\uffee\021" +
    "\uffee\027\uffee\030\uffee\001\002\000\054\010\015\012\010" +
    "\013\005\014\027\015\011\016\016\017\013\022\024\023" +
    "\004\024\025\025\026\026\031\031\023\032\030\033\012" +
    "\034\014\035\017\036\021\037\007\040\022\041\020\001" +
    "\002\000\024\004\037\005\034\006\042\007\035\011\106" +
    "\020\044\021\043\027\036\030\040\001\002\000\026\002" +
    "\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa\011\ufffa\020\ufffa" +
    "\021\ufffa\027\ufffa\030\ufffa\001\002\000\024\004\037\005" +
    "\034\006\042\007\035\011\110\020\044\021\043\027\036" +
    "\030\040\001\002\000\026\002\ufffc\004\ufffc\005\ufffc\006" +
    "\ufffc\007\ufffc\011\ufffc\020\ufffc\021\ufffc\027\ufffc\030\ufffc" +
    "\001\002\000\054\010\015\012\010\013\005\014\027\015" +
    "\011\016\016\017\013\022\024\023\004\024\025\025\026" +
    "\026\031\031\023\032\030\033\012\034\014\035\017\036" +
    "\021\037\007\040\022\041\020\001\002\000\024\004\037" +
    "\005\034\006\042\007\035\011\113\020\044\021\043\027" +
    "\036\030\040\001\002\000\026\002\uffef\004\uffef\005\uffef" +
    "\006\uffef\007\uffef\011\uffef\020\uffef\021\uffef\027\uffef\030" +
    "\uffef\001\002\000\054\010\015\012\010\013\005\014\027" +
    "\015\011\016\016\017\013\022\024\023\004\024\025\025" +
    "\026\026\031\031\023\032\030\033\012\034\014\035\017" +
    "\036\021\037\007\040\022\041\020\001\002\000\024\004" +
    "\037\005\034\006\042\007\035\011\116\020\044\021\043" +
    "\027\036\030\040\001\002\000\026\002\ufff9\004\ufff9\005" +
    "\ufff9\006\ufff9\007\ufff9\011\ufff9\020\ufff9\021\ufff9\027\ufff9" +
    "\030\ufff9\001\002\000\054\010\015\012\010\013\005\014" +
    "\027\015\011\016\016\017\013\022\024\023\004\024\025" +
    "\025\026\026\031\031\023\032\030\033\012\034\014\035" +
    "\017\036\021\037\007\040\022\041\020\001\002\000\024" +
    "\004\037\005\034\006\042\007\035\011\121\020\044\021" +
    "\043\027\036\030\040\001\002\000\026\002\ufff0\004\ufff0" +
    "\005\ufff0\006\ufff0\007\ufff0\011\ufff0\020\ufff0\021\ufff0\027" +
    "\ufff0\030\ufff0\001\002\000\054\010\015\012\010\013\005" +
    "\014\027\015\011\016\016\017\013\022\024\023\004\024" +
    "\025\025\026\026\031\031\023\032\030\033\012\034\014" +
    "\035\017\036\021\037\007\040\022\041\020\001\002\000" +
    "\024\004\037\005\034\006\042\007\035\011\124\020\044" +
    "\021\043\027\036\030\040\001\002\000\026\002\ufffb\004" +
    "\ufffb\005\ufffb\006\ufffb\007\ufffb\011\ufffb\020\ufffb\021\ufffb" +
    "\027\ufffb\030\ufffb\001\002\000\054\010\015\012\010\013" +
    "\005\014\027\015\011\016\016\017\013\022\024\023\004" +
    "\024\025\025\026\026\031\031\023\032\030\033\012\034" +
    "\014\035\017\036\021\037\007\040\022\041\020\001\002" +
    "\000\024\004\037\005\034\006\042\007\035\011\127\020" +
    "\044\021\043\027\036\030\040\001\002\000\026\002\ufff6" +
    "\004\ufff6\005\ufff6\006\ufff6\007\ufff6\011\ufff6\020\ufff6\021" +
    "\ufff6\027\ufff6\030\ufff6\001\002\000\054\010\015\012\010" +
    "\013\005\014\027\015\011\016\016\017\013\022\024\023" +
    "\004\024\025\025\026\026\031\031\023\032\030\033\012" +
    "\034\014\035\017\036\021\037\007\040\022\041\020\001" +
    "\002\000\024\004\037\005\034\006\042\007\035\011\132" +
    "\020\044\021\043\027\036\030\040\001\002\000\026\002" +
    "\uffec\004\uffec\005\uffec\006\uffec\007\uffec\011\uffec\020\uffec" +
    "\021\uffec\027\uffec\030\uffec\001\002\000\004\002\000\001" +
    "\002\000\054\010\015\012\010\013\005\014\027\015\011" +
    "\016\016\017\013\022\024\023\004\024\025\025\026\026" +
    "\031\031\023\032\030\033\012\034\014\035\017\036\021" +
    "\037\007\040\022\041\020\001\002\000\024\004\037\005" +
    "\034\006\042\007\035\011\136\020\044\021\043\027\036" +
    "\030\040\001\002\000\026\002\ufff5\004\ufff5\005\ufff5\006" +
    "\ufff5\007\ufff5\011\ufff5\020\ufff5\021\ufff5\027\ufff5\030\ufff5" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\134\000\004\003\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\032\001\001" +
    "\000\002\001\001\000\004\003\052\001\001\000\004\003" +
    "\051\001\001\000\002\001\001\000\004\003\050\001\001" +
    "\000\004\003\047\001\001\000\002\001\001\000\004\003" +
    "\046\001\001\000\004\003\045\001\001\000\004\003\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\114" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\117\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\122\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\130\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\134\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CalcParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CalcParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public Symbol do_action(
    int                        act_num,
    lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CalcParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CalcParser$actions {
  private final CalcParser parser;

  /** Constructor */
  CUP$CalcParser$actions(CalcParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final Symbol CUP$CalcParser$do_action(
    int                        CUP$CalcParser$act_num,
    lr_parser CUP$CalcParser$parser,
    java.util.Stack            CUP$CalcParser$stack,
    int                        CUP$CalcParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      Symbol CUP$CalcParser$result;

      /* select the action based on the action number */
      switch (CUP$CalcParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= NUMBER 
            {
              Double RESULT = null;
		int eleft = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).left;
		int eright = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).right;
		Double e = (Double)((Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).value;
		 RESULT = e; 
              CUP$CalcParser$result = new Symbol(1/*expr*/, ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).left, ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).right, RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= NATURAL 
            {
              Double RESULT = null;
		int eleft = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).left;
		int eright = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).right;
		Object e = (Object)((Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).value;
		 RESULT = Math.E; 
              CUP$CalcParser$result = new Symbol(1/*expr*/, ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).left, ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).right, RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= PI 
            {
              Double RESULT = null;
		int eleft = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).left;
		int eright = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).right;
		Object e = (Object)((Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).value;
		 RESULT = Math.PI; 
              CUP$CalcParser$result = new Symbol(1/*expr*/, ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).left, ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).right, RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= expr ROOT expr 
            {
              Double RESULT = null;
		int e1left = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).left;
		int e1right = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).right;
		Double e1 = (Double)((Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).value;
		int e2left = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).left;
		int e2right = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).right;
		Double e2 = (Double)((Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).value;
		 RESULT = Math.pow(Math.exp (1/e1.doubleValue()),Math.log(e2.doubleValue())); 
              CUP$CalcParser$result = new Symbol(1/*expr*/, ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).left, ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).right, RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= expr PERCENTAGE 
            {
              Double RESULT = null;
		int eleft = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).left;
		int eright = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).right;
		Double e = (Double)((Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).value;
		 RESULT = new Double(e.doubleValue() / 100.0); 
              CUP$CalcParser$result = new Symbol(1/*expr*/, ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).left, ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).right, RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= ABSOLUTE LPAREN expr RPAREN 
            {
              Double RESULT = null;
		int eleft = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).left;
		int eright = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).right;
		Double e = (Double)((Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).value;
		 RESULT = Math.abs(e.doubleValue()); 
              CUP$CalcParser$result = new Symbol(1/*expr*/, ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-3)).left, ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).right, RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= NEGATE LPAREN expr RPAREN 
            {
              Double RESULT = null;
		int eleft = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).left;
		int eright = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).right;
		Double e = (Double)((Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).value;
		 RESULT = new Double(-1.0 * e.doubleValue()); 
              CUP$CalcParser$result = new Symbol(1/*expr*/, ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-3)).left, ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).right, RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= TANINVDEG LPAREN expr RPAREN 
            {
              Double RESULT = null;
		int eleft = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).left;
		int eright = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).right;
		Double e = (Double)((Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).value;
		 RESULT = 180/Math.PI*Math.atan( e.doubleValue() ); 
              CUP$CalcParser$result = new Symbol(1/*expr*/, ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-3)).left, ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).right, RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= SININVDEG LPAREN expr RPAREN 
            {
              Double RESULT = null;
		int eleft = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).left;
		int eright = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).right;
		Double e = (Double)((Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).value;
		 RESULT = 180/Math.PI*Math.asin( e.doubleValue() ); 
              CUP$CalcParser$result = new Symbol(1/*expr*/, ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-3)).left, ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).right, RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= COSINVDEG LPAREN expr RPAREN 
            {
              Double RESULT = null;
		int eleft = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).left;
		int eright = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).right;
		Double e = (Double)((Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).value;
		 RESULT = 180/Math.PI*Math.acos( e.doubleValue() ); 
              CUP$CalcParser$result = new Symbol(1/*expr*/, ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-3)).left, ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).right, RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= TANDEG LPAREN expr RPAREN 
            {
              Double RESULT = null;
		int eleft = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).left;
		int eright = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).right;
		Double e = (Double)((Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).value;
		 RESULT = Math.tan( Math.PI/180*e.doubleValue() ); 
              CUP$CalcParser$result = new Symbol(1/*expr*/, ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-3)).left, ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).right, RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= SINDEG LPAREN expr RPAREN 
            {
              Double RESULT = null;
		int eleft = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).left;
		int eright = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).right;
		Double e = (Double)((Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).value;
		 RESULT = Math.sin( Math.PI/180*e.doubleValue() ); 
              CUP$CalcParser$result = new Symbol(1/*expr*/, ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-3)).left, ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).right, RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= COSDEG LPAREN expr RPAREN 
            {
              Double RESULT = null;
		int eleft = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).left;
		int eright = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).right;
		Double e = (Double)((Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).value;
		 RESULT = Math.cos( Math.PI/180*e.doubleValue() ); 
              CUP$CalcParser$result = new Symbol(1/*expr*/, ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-3)).left, ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).right, RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= TANINV LPAREN expr RPAREN 
            {
              Double RESULT = null;
		int eleft = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).left;
		int eright = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).right;
		Double e = (Double)((Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).value;
		 RESULT = Math.atan( e ); 
              CUP$CalcParser$result = new Symbol(1/*expr*/, ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-3)).left, ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).right, RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= SININV LPAREN expr RPAREN 
            {
              Double RESULT = null;
		int eleft = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).left;
		int eright = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).right;
		Double e = (Double)((Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).value;
		 RESULT = Math.asin( e ); 
              CUP$CalcParser$result = new Symbol(1/*expr*/, ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-3)).left, ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).right, RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= COSINV LPAREN expr RPAREN 
            {
              Double RESULT = null;
		int eleft = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).left;
		int eright = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).right;
		Double e = (Double)((Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).value;
		 RESULT = Math.acos( e ); 
              CUP$CalcParser$result = new Symbol(1/*expr*/, ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-3)).left, ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).right, RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= TAN LPAREN expr RPAREN 
            {
              Double RESULT = null;
		int eleft = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).left;
		int eright = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).right;
		Double e = (Double)((Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).value;
		 RESULT = Math.tan( e ); 
              CUP$CalcParser$result = new Symbol(1/*expr*/, ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-3)).left, ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).right, RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= SIN LPAREN expr RPAREN 
            {
              Double RESULT = null;
		int eleft = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).left;
		int eright = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).right;
		Double e = (Double)((Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).value;
		 RESULT = Math.sin( e ); 
              CUP$CalcParser$result = new Symbol(1/*expr*/, ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-3)).left, ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).right, RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= COS LPAREN expr RPAREN 
            {
              Double RESULT = null;
		int eleft = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).left;
		int eright = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).right;
		Double e = (Double)((Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).value;
		 RESULT = Math.cos( e ); 
              CUP$CalcParser$result = new Symbol(1/*expr*/, ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-3)).left, ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).right, RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= expr EXPONENT expr 
            {
              Double RESULT = null;
		int e1left = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).left;
		int e1right = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).right;
		Double e1 = (Double)((Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).value;
		int e2left = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).left;
		int e2right = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).right;
		Double e2 = (Double)((Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).value;
		 RESULT = new Double(Math.pow(e1.doubleValue(), e2.doubleValue())); 
              CUP$CalcParser$result = new Symbol(1/*expr*/, ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).left, ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).right, RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= expr EXP expr 
            {
              Double RESULT = null;
		int e1left = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).left;
		int e1right = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).right;
		Double e1 = (Double)((Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).value;
		int e2left = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).left;
		int e2right = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).right;
		Double e2 = (Double)((Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).value;
		 RESULT = new Double(e1.doubleValue() * Math.pow(10, e2.doubleValue())); 
              CUP$CalcParser$result = new Symbol(1/*expr*/, ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).left, ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).right, RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= SQRT LPAREN expr RPAREN 
            {
              Double RESULT = null;
		int eleft = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).left;
		int eright = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).right;
		Double e = (Double)((Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).value;
		 RESULT = Math.sqrt( e ); 
              CUP$CalcParser$result = new Symbol(1/*expr*/, ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-3)).left, ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).right, RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= LOG LPAREN expr RPAREN 
            {
              Double RESULT = null;
		int eleft = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).left;
		int eright = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).right;
		Double e = (Double)((Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).value;
		 RESULT = Math.log( e ) / Math.log( 10 ); 
              CUP$CalcParser$result = new Symbol(1/*expr*/, ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-3)).left, ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).right, RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= LN LPAREN expr RPAREN 
            {
              Double RESULT = null;
		int eleft = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).left;
		int eright = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).right;
		Double e = (Double)((Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).value;
		 RESULT = Math.log( e ) / Math.log( Math.E ); 
              CUP$CalcParser$result = new Symbol(1/*expr*/, ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-3)).left, ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).right, RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= LPAREN expr RPAREN 
            {
              Double RESULT = null;
		int eleft = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).left;
		int eright = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).right;
		Double e = (Double)((Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).value;
		 RESULT = e; 
              CUP$CalcParser$result = new Symbol(1/*expr*/, ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).left, ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).right, RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr ::= expr DIVIDE expr 
            {
              Double RESULT = null;
		int e1left = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).left;
		int e1right = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).right;
		Double e1 = (Double)((Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).value;
		int e2left = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).left;
		int e2right = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).right;
		Double e2 = (Double)((Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).value;
		 RESULT = new Double(e1.doubleValue() / e2.doubleValue()); 
              CUP$CalcParser$result = new Symbol(1/*expr*/, ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).left, ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).right, RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr ::= expr TIMES expr 
            {
              Double RESULT = null;
		int e1left = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).left;
		int e1right = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).right;
		Double e1 = (Double)((Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).value;
		int e2left = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).left;
		int e2right = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).right;
		Double e2 = (Double)((Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).value;
		 RESULT = new Double(e1.doubleValue() * e2.doubleValue()); 
              CUP$CalcParser$result = new Symbol(1/*expr*/, ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).left, ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).right, RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr ::= expr MINUS expr 
            {
              Double RESULT = null;
		int e1left = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).left;
		int e1right = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).right;
		Double e1 = (Double)((Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).value;
		int e2left = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).left;
		int e2right = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).right;
		Double e2 = (Double)((Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).value;
		 RESULT = new Double(e1.doubleValue() - e2.doubleValue()); 
              CUP$CalcParser$result = new Symbol(1/*expr*/, ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).left, ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).right, RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= expr EOF 
            {
              Object RESULT = null;
		int start_valleft = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).left;
		int start_valright = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).right;
		Double start_val = (Double)((Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).value;
		RESULT = start_val;
              CUP$CalcParser$result = new Symbol(0/*$START*/, ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).left, ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$CalcParser$parser.done_parsing();
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // expr ::= expr PLUS expr 
            {
              Double RESULT = null;
		int e1left = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).left;
		int e1right = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).right;
		Double e1 = (Double)((Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).value;
		int e2left = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).left;
		int e2right = ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).right;
		Double e2 = (Double)((Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).value;
		 RESULT = new Double(e1.doubleValue() + e2.doubleValue()); 
              CUP$CalcParser$result = new Symbol(1/*expr*/, ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).left, ((Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-0)).right, RESULT);
            }
          return CUP$CalcParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

